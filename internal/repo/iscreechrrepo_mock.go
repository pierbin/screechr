// Code generated by MockGen. DO NOT EDIT.
// Source: iscreechrrepo.go

// Package repo is a generated GoMock package.
package repo

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/pierbin/screechr/internal/models"
)

// MockIScreechrRepo is a mock of IScreechrRepo interface.
type MockIScreechrRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIScreechrRepoMockRecorder
}

// MockIScreechrRepoMockRecorder is the mock recorder for MockIScreechrRepo.
type MockIScreechrRepoMockRecorder struct {
	mock *MockIScreechrRepo
}

// NewMockIScreechrRepo creates a new mock instance.
func NewMockIScreechrRepo(ctrl *gomock.Controller) *MockIScreechrRepo {
	mock := &MockIScreechrRepo{ctrl: ctrl}
	mock.recorder = &MockIScreechrRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIScreechrRepo) EXPECT() *MockIScreechrRepoMockRecorder {
	return m.recorder
}

// CreateScreech mocks base method.
func (m *MockIScreechrRepo) CreateScreech(id int64, screech *models.Screech) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateScreech", id, screech)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateScreech indicates an expected call of CreateScreech.
func (mr *MockIScreechrRepoMockRecorder) CreateScreech(id, screech interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScreech", reflect.TypeOf((*MockIScreechrRepo)(nil).CreateScreech), id, screech)
}

// GetProfile mocks base method.
func (m *MockIScreechrRepo) GetProfile(id int64, token string) (*models.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", id, token)
	ret0, _ := ret[0].(*models.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockIScreechrRepoMockRecorder) GetProfile(id, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockIScreechrRepo)(nil).GetProfile), id, token)
}

// GetScreech mocks base method.
func (m *MockIScreechrRepo) GetScreech(id int64) (*models.Screech, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScreech", id)
	ret0, _ := ret[0].(*models.Screech)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScreech indicates an expected call of GetScreech.
func (mr *MockIScreechrRepoMockRecorder) GetScreech(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScreech", reflect.TypeOf((*MockIScreechrRepo)(nil).GetScreech), id)
}

// GetScreechList mocks base method.
func (m *MockIScreechrRepo) GetScreechList(creatorid, size int64, order string) ([]models.Screech, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScreechList", creatorid, size, order)
	ret0, _ := ret[0].([]models.Screech)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScreechList indicates an expected call of GetScreechList.
func (mr *MockIScreechrRepoMockRecorder) GetScreechList(creatorid, size, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScreechList", reflect.TypeOf((*MockIScreechrRepo)(nil).GetScreechList), creatorid, size, order)
}

// UpdateProfile mocks base method.
func (m *MockIScreechrRepo) UpdateProfile(id int64, token string, profile *models.Profile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", id, token, profile)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockIScreechrRepoMockRecorder) UpdateProfile(id, token, profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockIScreechrRepo)(nil).UpdateProfile), id, token, profile)
}

// UpdateScreech mocks base method.
func (m *MockIScreechrRepo) UpdateScreech(id int64, screech *models.Screech) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScreech", id, screech)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateScreech indicates an expected call of UpdateScreech.
func (mr *MockIScreechrRepoMockRecorder) UpdateScreech(id, screech interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScreech", reflect.TypeOf((*MockIScreechrRepo)(nil).UpdateScreech), id, screech)
}
